#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
  char *data;
  struct Node *next;
} Node;

typedef struct LinkedList {
  int length;
  struct Node *head;
  struct Node *tail;
} LinkedList;

void addNode(LinkedList *list, char *value) {
  Node *newNode = malloc(sizeof(Node));
  newNode->data = value;
  newNode->next = NULL;

  if (list->head == NULL) {
    list->head = newNode;
    list->tail = newNode;
    list->length++;
  } else {
    list->tail->next = newNode;
    list->tail = list->tail->next;

    if (list->length == 5) {
      Node *temp = malloc(sizeof(Node));
      temp = list->head;
      list->head = list->head->next;
      free(temp->data);
      free(temp->next);
      free(temp);
    } else {
      list->length++;
    }
  }
}
void printList(LinkedList *list) {
  Node *temp = list->head;
  while (temp != NULL) {
    printf("%s", temp->data);
    temp = list->head->next;
  }
}

int main() {
  char *buffer;
  size_t size;
  ssize_t line;
  int exit = 1;
  LinkedList *llist = malloc(sizeof(LinkedList));
  if (llist == NULL) {
    exit = -1;
  }
  llist->head = NULL;
  llist->tail = NULL;
  llist->length = 0;

  while (exit != -1) {
    printf("Enter input: ");
    buffer = NULL;
    size = 0;
    line = getline(&buffer, &size, stdin);

    if (line == -1 || strcmp(buffer, "\n") == 0) {
      exit = -1;
    } else if (strcmp(buffer, "print\n") == 0) {
      printList(llist);
    } else {
      addNode(llist, buffer);
      printf("%s", llist->head->data);
      printf("%d", llist->length);
    }
    free(buffer);
  }
  free(llist);
  return 0;
}
